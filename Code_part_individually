#include <iostream>
#include <vector>
#include <unordered_map>
#include <set>
#include <algorithm>

using namespace std;

class Bank {
public:
    string name;
    int netAmount;
    set<string> types;
};

int getMinIndex(bank listOfNetAmounts[],int numBanks){
    int min=INT_MAX, minIndex=-1;
    for(int i=0;i<numBanks;i++){
        if(listOfNetAmounts[i].netAmount == 0) continue;

        if(listOfNetAmounts[i].netAmount < min){
            minIndex = i;
            min = listOfNetAmounts[i].netAmount;
        }
    }
    return minIndex;
}

int getSimpleMaxIndex(bank listOfNetAmounts[],int numBanks){
    int max=INT_MIN, maxIndex=-1;
    for(int i=0;i<numBanks;i++){
        if(listOfNetAmounts[i].netAmount == 0) continue;

        if(listOfNetAmounts[i].netAmount > max){
            maxIndex = i;
            max = listOfNetAmounts[i].netAmount;
        }
    }
    return maxIndex;
}

pair<int, string> getMaxIndex(Bank listOfNetAmounts[], int numBanks, int minIndex, Bank input[], int maxNumTypes) {
    int max = INT_MIN;
    int maxIndex = -1;
    string matchingType;

    for (int i = 0; i < numBanks; i++) {
        if (listOfNetAmounts[i].netAmount == 0) continue;

        if (listOfNetAmounts[i].netAmount < 0) continue;

        vector<string> v(maxNumTypes);
        vector<string>::iterator ls = set_intersection(
            listOfNetAmounts[minIndex].types.begin(), listOfNetAmounts[minIndex].types.end(),
            listOfNetAmounts[i].types.begin(), listOfNetAmounts[i].types.end(), v.begin());

        if ((ls - v.begin()) != 0 && max < listOfNetAmounts[i].netAmount) {

            max = listOfNetAmounts[i].netAmount;
            maxIndex = i;
            matchingType = *(v.begin());
        }
    }
    return make_pair(maxIndex, matchingType);
}

void printAns(vector<vector<pair<int, string>>> ansGraph, int numBanks, Bank input[]) {
    cout << "\nThe transactions for minimum cash flow are as follows : \n\n";

    for (int i = 0; i < numBanks; i++) {
        for (int j = 0; j < numBanks; j++) {
            if(i==j) continue;

            if(ansGraph[i][j].first != 0 && ansGraph[j][i].first != 0){

                if(ansGraph[i][j].first == ansGraph[j][i].first){
                    ansGraph[i][j].first=0;
                    ansGraph[j][i].first=0;
                }
                else if(ansGraph[i][j].first > ansGraph[j][i].first){
                    ansGraph[i][j].first -= ansGraph[j][i].first;
                    ansGraph[j][i].first =0;

                    cout<<input[i].name<<" pays Rs" << ansGraph[i][j].first<< "to "<<input[j].name<<" via "<<ansGraph[i][j].second<<endl;
                }
                else{
                    ansGraph[j][i].first -= ansGraph[i][j].first;
                    ansGraph[i][j].first = 0;

                    cout<<input[j].name<<" pays Rs "<< ansGraph[j][i].first<<" to "<<input[i].name<<" via "<<ansGraph[j][i].second<<endl;

                }
            }
            else if(ansGraph[i][j].first != 0){
                cout<<input[i].name<<" pays Rs "<<ansGraph[i][j].first<<" to "<<input[j].name<<" via "<<ansGraph[i][j].second<<endl;

            }
            else if(ansGraph[j][i].first != 0){
                cout<<input[j].name<<" pays Rs "<<ansGraph[j][i].first<<" to "<<input[i].name<<" via "<<ansGraph[j][i].second<<endl;

            }

            ansGraph[i][j].first = 0;
            ansGraph[j][i].first = 0;
        }
    }
    cout << "\n";
}

void minimizeCashFlow(int numBanks, Bank input[], unordered_map<string, int>& indexOf, int numTransactions,
                      vector<vector<int>>& graph, int maxNumTypes) {
    Bank listOfNetAmounts[numBanks];

   for(int b=0;b<numBanks;b++){
        listOfNetAmounts[b].name = input[b].name;
        listOfNetAmounts[b].types = input[b].types;

        int amount = 0;
        //incoming edges
        //column travers
        for(int i=0;i<numBanks;i++){
            amount += (graph[i][b]);
        }

        //outgoing edges
        //row traverse
        for(int j=0;j<numBanks;j++){
            amount += ((-1) * graph[b][j]);
        }

        listOfNetAmounts[b].netAmount = amount;
    }

    vector<vector<pair<int, string>>> ansGraph(numBanks, vector<pair<int, string>>(numBanks, {0, ""}));

    int numZeroNetAmounts = 0;

 int numZeroNetAmounts=0;

    for(int i=0;i<numBanks;i++){
        if(listOfNetAmounts[i].netAmount == 0) numZeroNetAmounts++;
    }
    // Remaining logic to settle payments...

    while (numZeroNetAmounts != numBanks) {
        int minIndex = getMinIndex(listOfNetAmounts, numBanks);
        pair<int, string> maxAns = getMaxIndex(listOfNetAmounts, numBanks, minIndex, input, maxNumTypes);

        int maxIndex = maxAns.first;

        if (maxIndex == -1) {
            cerr << "Error: No common payment method available between banks." << endl;
            return;
        } else {
            // Your existing transaction settlement code...
        }
    }

    printAns(ansGraph, numBanks, input);
}

int main()
{
    cout << "\n\n\t\t\t\t\t\t********* Welcome to CASH FLOW MINIMIZER SYSTEM ********\n\n\n";
    cout << "\n\n\t\t\t\t\t\t\t\tMethod of system \n\t\t\t\t\t\t\t********************************\n\n";
    cout << "This system minimizes the number of transactions among multiple banks in the different corners of the world that use different modes of payment.There is one world bank (with all payment modes) to act as an intermediary between banks that have no common mode of payment. \n\n\n";
    cout << "Enter the number of banks participating in the transactions.\n";
    int numBanks;
    cin >> numBanks;

    Bank input[numBanks];
    unordered_map<string,int> indexOf;//stores index of a bank

    cout << "Enter the details of the banks and transactions as stated:\n";
    cout << "\n\t\t* Bank name \n\t\t* number of payment modes \n\t\t* payment modes.\n";
    cout << "\n\n** First of all show the name of the world bank then show the others bank where transaction occurred from the world bank. \n";

    int maxNumTypes;
    for(int i=0; i<numBanks;i++){
        if(i==0){
            cout<<"World Bank : ";
        }
        else{
            cout<<"Bank "<<i<<" : ";
        }
        cin>>input[i].name;
        indexOf[input[i].name] = i;
        int numTypes;
        cin>>numTypes;

        if(i==0) maxNumTypes = numTypes;

        string type;
        while(numTypes--){
            cin>>type;

            input[i].types.insert(type);
        }

    }

    cout << "Enter number of transactions.\n";
    int numTransactions;
    cin >> numTransactions;

    vector<vector<int>> graph(numBanks,vector<int>(numBanks,0));//adjacency matrix

    cout << "Enter the details of each transaction as stated:";
    cout << "\n\n\t* Debtor Bank \n\t* creditor Bank \n\t* amount\n";
    cout << "\nThe transactions can be in any order\n\n";
    for(int i=0;i<numTransactions;i++){
        cout << (i) << " th transaction : ";
        string s1,s2;
        int amount;
        cin >> s1>>s2>>amount;

        graph[indexOf[s1]][indexOf[s2]] = amount;
    }

    //settle
    minimizeCashFlow(numBanks,input,indexOf,numTransactions,graph,maxNumTypes);
    return 0;
}


